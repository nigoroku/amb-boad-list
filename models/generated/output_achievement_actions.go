// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package generated

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// OutputAchievementAction is an object representing the database table.
type OutputAchievementAction struct {
	OutputAchievementActionID int       `boil:"output_achievement_action_id" json:"output_achievement_action_id" toml:"output_achievement_action_id" yaml:"output_achievement_action_id"`
	OutputAchievementID       int       `boil:"output_achievement_id" json:"output_achievement_id" toml:"output_achievement_id" yaml:"output_achievement_id"`
	UserID                    int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	ActionType                string    `boil:"action_type" json:"action_type" toml:"action_type" yaml:"action_type"`
	CreatedBy                 int       `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	CreatedAt                 time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ModifiedBy                null.Int  `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedAt                null.Time `boil:"modified_at" json:"modified_at,omitempty" toml:"modified_at" yaml:"modified_at,omitempty"`

	R *outputAchievementActionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L outputAchievementActionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OutputAchievementActionColumns = struct {
	OutputAchievementActionID string
	OutputAchievementID       string
	UserID                    string
	ActionType                string
	CreatedBy                 string
	CreatedAt                 string
	ModifiedBy                string
	ModifiedAt                string
}{
	OutputAchievementActionID: "output_achievement_action_id",
	OutputAchievementID:       "output_achievement_id",
	UserID:                    "user_id",
	ActionType:                "action_type",
	CreatedBy:                 "created_by",
	CreatedAt:                 "created_at",
	ModifiedBy:                "modified_by",
	ModifiedAt:                "modified_at",
}

// Generated where

var OutputAchievementActionWhere = struct {
	OutputAchievementActionID whereHelperint
	OutputAchievementID       whereHelperint
	UserID                    whereHelperint
	ActionType                whereHelperstring
	CreatedBy                 whereHelperint
	CreatedAt                 whereHelpertime_Time
	ModifiedBy                whereHelpernull_Int
	ModifiedAt                whereHelpernull_Time
}{
	OutputAchievementActionID: whereHelperint{field: "`output_achievement_actions`.`output_achievement_action_id`"},
	OutputAchievementID:       whereHelperint{field: "`output_achievement_actions`.`output_achievement_id`"},
	UserID:                    whereHelperint{field: "`output_achievement_actions`.`user_id`"},
	ActionType:                whereHelperstring{field: "`output_achievement_actions`.`action_type`"},
	CreatedBy:                 whereHelperint{field: "`output_achievement_actions`.`created_by`"},
	CreatedAt:                 whereHelpertime_Time{field: "`output_achievement_actions`.`created_at`"},
	ModifiedBy:                whereHelpernull_Int{field: "`output_achievement_actions`.`modified_by`"},
	ModifiedAt:                whereHelpernull_Time{field: "`output_achievement_actions`.`modified_at`"},
}

// OutputAchievementActionRels is where relationship names are stored.
var OutputAchievementActionRels = struct {
	OutputAchievement string
	User              string
}{
	OutputAchievement: "OutputAchievement",
	User:              "User",
}

// outputAchievementActionR is where relationships are stored.
type outputAchievementActionR struct {
	OutputAchievement *OutputAchievement
	User              *User
}

// NewStruct creates a new relationship struct
func (*outputAchievementActionR) NewStruct() *outputAchievementActionR {
	return &outputAchievementActionR{}
}

// outputAchievementActionL is where Load methods for each relationship are stored.
type outputAchievementActionL struct{}

var (
	outputAchievementActionAllColumns            = []string{"output_achievement_action_id", "output_achievement_id", "user_id", "action_type", "created_by", "created_at", "modified_by", "modified_at"}
	outputAchievementActionColumnsWithoutDefault = []string{"output_achievement_id", "user_id", "action_type", "created_by", "created_at", "modified_by", "modified_at"}
	outputAchievementActionColumnsWithDefault    = []string{"output_achievement_action_id"}
	outputAchievementActionPrimaryKeyColumns     = []string{"output_achievement_action_id"}
)

type (
	// OutputAchievementActionSlice is an alias for a slice of pointers to OutputAchievementAction.
	// This should generally be used opposed to []OutputAchievementAction.
	OutputAchievementActionSlice []*OutputAchievementAction
	// OutputAchievementActionHook is the signature for custom OutputAchievementAction hook methods
	OutputAchievementActionHook func(context.Context, boil.ContextExecutor, *OutputAchievementAction) error

	outputAchievementActionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	outputAchievementActionType                 = reflect.TypeOf(&OutputAchievementAction{})
	outputAchievementActionMapping              = queries.MakeStructMapping(outputAchievementActionType)
	outputAchievementActionPrimaryKeyMapping, _ = queries.BindMapping(outputAchievementActionType, outputAchievementActionMapping, outputAchievementActionPrimaryKeyColumns)
	outputAchievementActionInsertCacheMut       sync.RWMutex
	outputAchievementActionInsertCache          = make(map[string]insertCache)
	outputAchievementActionUpdateCacheMut       sync.RWMutex
	outputAchievementActionUpdateCache          = make(map[string]updateCache)
	outputAchievementActionUpsertCacheMut       sync.RWMutex
	outputAchievementActionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var outputAchievementActionBeforeInsertHooks []OutputAchievementActionHook
var outputAchievementActionBeforeUpdateHooks []OutputAchievementActionHook
var outputAchievementActionBeforeDeleteHooks []OutputAchievementActionHook
var outputAchievementActionBeforeUpsertHooks []OutputAchievementActionHook

var outputAchievementActionAfterInsertHooks []OutputAchievementActionHook
var outputAchievementActionAfterSelectHooks []OutputAchievementActionHook
var outputAchievementActionAfterUpdateHooks []OutputAchievementActionHook
var outputAchievementActionAfterDeleteHooks []OutputAchievementActionHook
var outputAchievementActionAfterUpsertHooks []OutputAchievementActionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OutputAchievementAction) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outputAchievementActionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OutputAchievementAction) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outputAchievementActionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OutputAchievementAction) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outputAchievementActionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OutputAchievementAction) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outputAchievementActionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OutputAchievementAction) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outputAchievementActionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OutputAchievementAction) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outputAchievementActionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OutputAchievementAction) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outputAchievementActionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OutputAchievementAction) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outputAchievementActionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OutputAchievementAction) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outputAchievementActionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOutputAchievementActionHook registers your hook function for all future operations.
func AddOutputAchievementActionHook(hookPoint boil.HookPoint, outputAchievementActionHook OutputAchievementActionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		outputAchievementActionBeforeInsertHooks = append(outputAchievementActionBeforeInsertHooks, outputAchievementActionHook)
	case boil.BeforeUpdateHook:
		outputAchievementActionBeforeUpdateHooks = append(outputAchievementActionBeforeUpdateHooks, outputAchievementActionHook)
	case boil.BeforeDeleteHook:
		outputAchievementActionBeforeDeleteHooks = append(outputAchievementActionBeforeDeleteHooks, outputAchievementActionHook)
	case boil.BeforeUpsertHook:
		outputAchievementActionBeforeUpsertHooks = append(outputAchievementActionBeforeUpsertHooks, outputAchievementActionHook)
	case boil.AfterInsertHook:
		outputAchievementActionAfterInsertHooks = append(outputAchievementActionAfterInsertHooks, outputAchievementActionHook)
	case boil.AfterSelectHook:
		outputAchievementActionAfterSelectHooks = append(outputAchievementActionAfterSelectHooks, outputAchievementActionHook)
	case boil.AfterUpdateHook:
		outputAchievementActionAfterUpdateHooks = append(outputAchievementActionAfterUpdateHooks, outputAchievementActionHook)
	case boil.AfterDeleteHook:
		outputAchievementActionAfterDeleteHooks = append(outputAchievementActionAfterDeleteHooks, outputAchievementActionHook)
	case boil.AfterUpsertHook:
		outputAchievementActionAfterUpsertHooks = append(outputAchievementActionAfterUpsertHooks, outputAchievementActionHook)
	}
}

// One returns a single outputAchievementAction record from the query.
func (q outputAchievementActionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OutputAchievementAction, error) {
	o := &OutputAchievementAction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "generated: failed to execute a one query for output_achievement_actions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OutputAchievementAction records from the query.
func (q outputAchievementActionQuery) All(ctx context.Context, exec boil.ContextExecutor) (OutputAchievementActionSlice, error) {
	var o []*OutputAchievementAction

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "generated: failed to assign all query results to OutputAchievementAction slice")
	}

	if len(outputAchievementActionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OutputAchievementAction records in the query.
func (q outputAchievementActionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to count output_achievement_actions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q outputAchievementActionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "generated: failed to check if output_achievement_actions exists")
	}

	return count > 0, nil
}

// OutputAchievement pointed to by the foreign key.
func (o *OutputAchievementAction) OutputAchievement(mods ...qm.QueryMod) outputAchievementQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`output_achievement_id` = ?", o.OutputAchievementID),
	}

	queryMods = append(queryMods, mods...)

	query := OutputAchievements(queryMods...)
	queries.SetFrom(query.Query, "`output_achievements`")

	return query
}

// User pointed to by the foreign key.
func (o *OutputAchievementAction) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`user_id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`users`")

	return query
}

// LoadOutputAchievement allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (outputAchievementActionL) LoadOutputAchievement(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOutputAchievementAction interface{}, mods queries.Applicator) error {
	var slice []*OutputAchievementAction
	var object *OutputAchievementAction

	if singular {
		object = maybeOutputAchievementAction.(*OutputAchievementAction)
	} else {
		slice = *maybeOutputAchievementAction.(*[]*OutputAchievementAction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &outputAchievementActionR{}
		}
		args = append(args, object.OutputAchievementID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &outputAchievementActionR{}
			}

			for _, a := range args {
				if a == obj.OutputAchievementID {
					continue Outer
				}
			}

			args = append(args, obj.OutputAchievementID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`output_achievements`), qm.WhereIn(`output_achievements.output_achievement_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OutputAchievement")
	}

	var resultSlice []*OutputAchievement
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OutputAchievement")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for output_achievements")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for output_achievements")
	}

	if len(outputAchievementActionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OutputAchievement = foreign
		if foreign.R == nil {
			foreign.R = &outputAchievementR{}
		}
		foreign.R.OutputAchievementActions = append(foreign.R.OutputAchievementActions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OutputAchievementID == foreign.OutputAchievementID {
				local.R.OutputAchievement = foreign
				if foreign.R == nil {
					foreign.R = &outputAchievementR{}
				}
				foreign.R.OutputAchievementActions = append(foreign.R.OutputAchievementActions, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (outputAchievementActionL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOutputAchievementAction interface{}, mods queries.Applicator) error {
	var slice []*OutputAchievementAction
	var object *OutputAchievementAction

	if singular {
		object = maybeOutputAchievementAction.(*OutputAchievementAction)
	} else {
		slice = *maybeOutputAchievementAction.(*[]*OutputAchievementAction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &outputAchievementActionR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &outputAchievementActionR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.user_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(outputAchievementActionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.OutputAchievementActions = append(foreign.R.OutputAchievementActions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.UserID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.OutputAchievementActions = append(foreign.R.OutputAchievementActions, local)
				break
			}
		}
	}

	return nil
}

// SetOutputAchievement of the outputAchievementAction to the related item.
// Sets o.R.OutputAchievement to related.
// Adds o to related.R.OutputAchievementActions.
func (o *OutputAchievementAction) SetOutputAchievement(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OutputAchievement) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `output_achievement_actions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"output_achievement_id"}),
		strmangle.WhereClause("`", "`", 0, outputAchievementActionPrimaryKeyColumns),
	)
	values := []interface{}{related.OutputAchievementID, o.OutputAchievementActionID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OutputAchievementID = related.OutputAchievementID
	if o.R == nil {
		o.R = &outputAchievementActionR{
			OutputAchievement: related,
		}
	} else {
		o.R.OutputAchievement = related
	}

	if related.R == nil {
		related.R = &outputAchievementR{
			OutputAchievementActions: OutputAchievementActionSlice{o},
		}
	} else {
		related.R.OutputAchievementActions = append(related.R.OutputAchievementActions, o)
	}

	return nil
}

// SetUser of the outputAchievementAction to the related item.
// Sets o.R.User to related.
// Adds o to related.R.OutputAchievementActions.
func (o *OutputAchievementAction) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `output_achievement_actions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, outputAchievementActionPrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.OutputAchievementActionID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.UserID
	if o.R == nil {
		o.R = &outputAchievementActionR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			OutputAchievementActions: OutputAchievementActionSlice{o},
		}
	} else {
		related.R.OutputAchievementActions = append(related.R.OutputAchievementActions, o)
	}

	return nil
}

// OutputAchievementActions retrieves all the records using an executor.
func OutputAchievementActions(mods ...qm.QueryMod) outputAchievementActionQuery {
	mods = append(mods, qm.From("`output_achievement_actions`"))
	return outputAchievementActionQuery{NewQuery(mods...)}
}

// FindOutputAchievementAction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOutputAchievementAction(ctx context.Context, exec boil.ContextExecutor, outputAchievementActionID int, selectCols ...string) (*OutputAchievementAction, error) {
	outputAchievementActionObj := &OutputAchievementAction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `output_achievement_actions` where `output_achievement_action_id`=?", sel,
	)

	q := queries.Raw(query, outputAchievementActionID)

	err := q.Bind(ctx, exec, outputAchievementActionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "generated: unable to select from output_achievement_actions")
	}

	return outputAchievementActionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OutputAchievementAction) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("generated: no output_achievement_actions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(outputAchievementActionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	outputAchievementActionInsertCacheMut.RLock()
	cache, cached := outputAchievementActionInsertCache[key]
	outputAchievementActionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			outputAchievementActionAllColumns,
			outputAchievementActionColumnsWithDefault,
			outputAchievementActionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(outputAchievementActionType, outputAchievementActionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(outputAchievementActionType, outputAchievementActionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `output_achievement_actions` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `output_achievement_actions` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `output_achievement_actions` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, outputAchievementActionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "generated: unable to insert into output_achievement_actions")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.OutputAchievementActionID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == outputAchievementActionMapping["output_achievement_action_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.OutputAchievementActionID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "generated: unable to populate default values for output_achievement_actions")
	}

CacheNoHooks:
	if !cached {
		outputAchievementActionInsertCacheMut.Lock()
		outputAchievementActionInsertCache[key] = cache
		outputAchievementActionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OutputAchievementAction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OutputAchievementAction) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	outputAchievementActionUpdateCacheMut.RLock()
	cache, cached := outputAchievementActionUpdateCache[key]
	outputAchievementActionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			outputAchievementActionAllColumns,
			outputAchievementActionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("generated: unable to update output_achievement_actions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `output_achievement_actions` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, outputAchievementActionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(outputAchievementActionType, outputAchievementActionMapping, append(wl, outputAchievementActionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to update output_achievement_actions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by update for output_achievement_actions")
	}

	if !cached {
		outputAchievementActionUpdateCacheMut.Lock()
		outputAchievementActionUpdateCache[key] = cache
		outputAchievementActionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q outputAchievementActionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to update all for output_achievement_actions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to retrieve rows affected for output_achievement_actions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OutputAchievementActionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("generated: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), outputAchievementActionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `output_achievement_actions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, outputAchievementActionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to update all in outputAchievementAction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to retrieve rows affected all in update all outputAchievementAction")
	}
	return rowsAff, nil
}

var mySQLOutputAchievementActionUniqueColumns = []string{
	"output_achievement_action_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OutputAchievementAction) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("generated: no output_achievement_actions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(outputAchievementActionColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLOutputAchievementActionUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	outputAchievementActionUpsertCacheMut.RLock()
	cache, cached := outputAchievementActionUpsertCache[key]
	outputAchievementActionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			outputAchievementActionAllColumns,
			outputAchievementActionColumnsWithDefault,
			outputAchievementActionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			outputAchievementActionAllColumns,
			outputAchievementActionPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("generated: unable to upsert output_achievement_actions, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "output_achievement_actions", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `output_achievement_actions` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(outputAchievementActionType, outputAchievementActionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(outputAchievementActionType, outputAchievementActionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "generated: unable to upsert for output_achievement_actions")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.OutputAchievementActionID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == outputAchievementActionMapping["output_achievement_action_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(outputAchievementActionType, outputAchievementActionMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "generated: unable to retrieve unique values for output_achievement_actions")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "generated: unable to populate default values for output_achievement_actions")
	}

CacheNoHooks:
	if !cached {
		outputAchievementActionUpsertCacheMut.Lock()
		outputAchievementActionUpsertCache[key] = cache
		outputAchievementActionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OutputAchievementAction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OutputAchievementAction) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("generated: no OutputAchievementAction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), outputAchievementActionPrimaryKeyMapping)
	sql := "DELETE FROM `output_achievement_actions` WHERE `output_achievement_action_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to delete from output_achievement_actions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by delete for output_achievement_actions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q outputAchievementActionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("generated: no outputAchievementActionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to delete all from output_achievement_actions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by deleteall for output_achievement_actions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OutputAchievementActionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(outputAchievementActionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), outputAchievementActionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `output_achievement_actions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, outputAchievementActionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to delete all from outputAchievementAction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by deleteall for output_achievement_actions")
	}

	if len(outputAchievementActionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OutputAchievementAction) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOutputAchievementAction(ctx, exec, o.OutputAchievementActionID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OutputAchievementActionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OutputAchievementActionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), outputAchievementActionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `output_achievement_actions`.* FROM `output_achievement_actions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, outputAchievementActionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "generated: unable to reload all in OutputAchievementActionSlice")
	}

	*o = slice

	return nil
}

// OutputAchievementActionExists checks if the OutputAchievementAction row exists.
func OutputAchievementActionExists(ctx context.Context, exec boil.ContextExecutor, outputAchievementActionID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `output_achievement_actions` where `output_achievement_action_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, outputAchievementActionID)
	}
	row := exec.QueryRowContext(ctx, sql, outputAchievementActionID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "generated: unable to check if output_achievement_actions exists")
	}

	return exists, nil
}
