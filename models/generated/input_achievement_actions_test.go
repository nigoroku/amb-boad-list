// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package generated

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testInputAchievementActions(t *testing.T) {
	t.Parallel()

	query := InputAchievementActions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testInputAchievementActionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InputAchievementAction{}
	if err = randomize.Struct(seed, o, inputAchievementActionDBTypes, true, inputAchievementActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievementAction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InputAchievementActions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInputAchievementActionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InputAchievementAction{}
	if err = randomize.Struct(seed, o, inputAchievementActionDBTypes, true, inputAchievementActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievementAction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := InputAchievementActions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InputAchievementActions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInputAchievementActionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InputAchievementAction{}
	if err = randomize.Struct(seed, o, inputAchievementActionDBTypes, true, inputAchievementActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievementAction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InputAchievementActionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InputAchievementActions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInputAchievementActionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InputAchievementAction{}
	if err = randomize.Struct(seed, o, inputAchievementActionDBTypes, true, inputAchievementActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievementAction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := InputAchievementActionExists(ctx, tx, o.InputAchievementActionID)
	if err != nil {
		t.Errorf("Unable to check if InputAchievementAction exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InputAchievementActionExists to return true, but got false.")
	}
}

func testInputAchievementActionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InputAchievementAction{}
	if err = randomize.Struct(seed, o, inputAchievementActionDBTypes, true, inputAchievementActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievementAction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	inputAchievementActionFound, err := FindInputAchievementAction(ctx, tx, o.InputAchievementActionID)
	if err != nil {
		t.Error(err)
	}

	if inputAchievementActionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testInputAchievementActionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InputAchievementAction{}
	if err = randomize.Struct(seed, o, inputAchievementActionDBTypes, true, inputAchievementActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievementAction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = InputAchievementActions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testInputAchievementActionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InputAchievementAction{}
	if err = randomize.Struct(seed, o, inputAchievementActionDBTypes, true, inputAchievementActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievementAction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := InputAchievementActions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInputAchievementActionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inputAchievementActionOne := &InputAchievementAction{}
	inputAchievementActionTwo := &InputAchievementAction{}
	if err = randomize.Struct(seed, inputAchievementActionOne, inputAchievementActionDBTypes, false, inputAchievementActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievementAction struct: %s", err)
	}
	if err = randomize.Struct(seed, inputAchievementActionTwo, inputAchievementActionDBTypes, false, inputAchievementActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievementAction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = inputAchievementActionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = inputAchievementActionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := InputAchievementActions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInputAchievementActionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	inputAchievementActionOne := &InputAchievementAction{}
	inputAchievementActionTwo := &InputAchievementAction{}
	if err = randomize.Struct(seed, inputAchievementActionOne, inputAchievementActionDBTypes, false, inputAchievementActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievementAction struct: %s", err)
	}
	if err = randomize.Struct(seed, inputAchievementActionTwo, inputAchievementActionDBTypes, false, inputAchievementActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievementAction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = inputAchievementActionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = inputAchievementActionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InputAchievementActions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func inputAchievementActionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *InputAchievementAction) error {
	*o = InputAchievementAction{}
	return nil
}

func inputAchievementActionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *InputAchievementAction) error {
	*o = InputAchievementAction{}
	return nil
}

func inputAchievementActionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *InputAchievementAction) error {
	*o = InputAchievementAction{}
	return nil
}

func inputAchievementActionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *InputAchievementAction) error {
	*o = InputAchievementAction{}
	return nil
}

func inputAchievementActionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *InputAchievementAction) error {
	*o = InputAchievementAction{}
	return nil
}

func inputAchievementActionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *InputAchievementAction) error {
	*o = InputAchievementAction{}
	return nil
}

func inputAchievementActionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *InputAchievementAction) error {
	*o = InputAchievementAction{}
	return nil
}

func inputAchievementActionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *InputAchievementAction) error {
	*o = InputAchievementAction{}
	return nil
}

func inputAchievementActionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *InputAchievementAction) error {
	*o = InputAchievementAction{}
	return nil
}

func testInputAchievementActionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &InputAchievementAction{}
	o := &InputAchievementAction{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, inputAchievementActionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize InputAchievementAction object: %s", err)
	}

	AddInputAchievementActionHook(boil.BeforeInsertHook, inputAchievementActionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	inputAchievementActionBeforeInsertHooks = []InputAchievementActionHook{}

	AddInputAchievementActionHook(boil.AfterInsertHook, inputAchievementActionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	inputAchievementActionAfterInsertHooks = []InputAchievementActionHook{}

	AddInputAchievementActionHook(boil.AfterSelectHook, inputAchievementActionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	inputAchievementActionAfterSelectHooks = []InputAchievementActionHook{}

	AddInputAchievementActionHook(boil.BeforeUpdateHook, inputAchievementActionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	inputAchievementActionBeforeUpdateHooks = []InputAchievementActionHook{}

	AddInputAchievementActionHook(boil.AfterUpdateHook, inputAchievementActionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	inputAchievementActionAfterUpdateHooks = []InputAchievementActionHook{}

	AddInputAchievementActionHook(boil.BeforeDeleteHook, inputAchievementActionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	inputAchievementActionBeforeDeleteHooks = []InputAchievementActionHook{}

	AddInputAchievementActionHook(boil.AfterDeleteHook, inputAchievementActionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	inputAchievementActionAfterDeleteHooks = []InputAchievementActionHook{}

	AddInputAchievementActionHook(boil.BeforeUpsertHook, inputAchievementActionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	inputAchievementActionBeforeUpsertHooks = []InputAchievementActionHook{}

	AddInputAchievementActionHook(boil.AfterUpsertHook, inputAchievementActionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	inputAchievementActionAfterUpsertHooks = []InputAchievementActionHook{}
}

func testInputAchievementActionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InputAchievementAction{}
	if err = randomize.Struct(seed, o, inputAchievementActionDBTypes, true, inputAchievementActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievementAction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InputAchievementActions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInputAchievementActionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InputAchievementAction{}
	if err = randomize.Struct(seed, o, inputAchievementActionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InputAchievementAction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(inputAchievementActionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := InputAchievementActions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInputAchievementActionToOneInputAchievementUsingInputAchievement(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local InputAchievementAction
	var foreign InputAchievement

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, inputAchievementActionDBTypes, false, inputAchievementActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievementAction struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, inputAchievementDBTypes, false, inputAchievementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievement struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.InputAchievementID = foreign.InputAchievementID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.InputAchievement().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.InputAchievementID != foreign.InputAchievementID {
		t.Errorf("want: %v, got %v", foreign.InputAchievementID, check.InputAchievementID)
	}

	slice := InputAchievementActionSlice{&local}
	if err = local.L.LoadInputAchievement(ctx, tx, false, (*[]*InputAchievementAction)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.InputAchievement == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.InputAchievement = nil
	if err = local.L.LoadInputAchievement(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.InputAchievement == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testInputAchievementActionToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local InputAchievementAction
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, inputAchievementActionDBTypes, false, inputAchievementActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievementAction struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.UserID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserID != foreign.UserID {
		t.Errorf("want: %v, got %v", foreign.UserID, check.UserID)
	}

	slice := InputAchievementActionSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*InputAchievementAction)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testInputAchievementActionToOneSetOpInputAchievementUsingInputAchievement(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a InputAchievementAction
	var b, c InputAchievement

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, inputAchievementActionDBTypes, false, strmangle.SetComplement(inputAchievementActionPrimaryKeyColumns, inputAchievementActionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, inputAchievementDBTypes, false, strmangle.SetComplement(inputAchievementPrimaryKeyColumns, inputAchievementColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, inputAchievementDBTypes, false, strmangle.SetComplement(inputAchievementPrimaryKeyColumns, inputAchievementColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*InputAchievement{&b, &c} {
		err = a.SetInputAchievement(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.InputAchievement != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.InputAchievementActions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.InputAchievementID != x.InputAchievementID {
			t.Error("foreign key was wrong value", a.InputAchievementID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.InputAchievementID))
		reflect.Indirect(reflect.ValueOf(&a.InputAchievementID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.InputAchievementID != x.InputAchievementID {
			t.Error("foreign key was wrong value", a.InputAchievementID, x.InputAchievementID)
		}
	}
}
func testInputAchievementActionToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a InputAchievementAction
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, inputAchievementActionDBTypes, false, strmangle.SetComplement(inputAchievementActionPrimaryKeyColumns, inputAchievementActionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.InputAchievementActions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.UserID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.UserID {
			t.Error("foreign key was wrong value", a.UserID, x.UserID)
		}
	}
}

func testInputAchievementActionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InputAchievementAction{}
	if err = randomize.Struct(seed, o, inputAchievementActionDBTypes, true, inputAchievementActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievementAction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInputAchievementActionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InputAchievementAction{}
	if err = randomize.Struct(seed, o, inputAchievementActionDBTypes, true, inputAchievementActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievementAction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InputAchievementActionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInputAchievementActionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InputAchievementAction{}
	if err = randomize.Struct(seed, o, inputAchievementActionDBTypes, true, inputAchievementActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievementAction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := InputAchievementActions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	inputAchievementActionDBTypes = map[string]string{`InputAchievementActionID`: `int`, `InputAchievementID`: `int`, `UserID`: `int`, `ActionType`: `varchar`, `CreatedBy`: `int`, `CreatedAt`: `timestamp`, `ModifiedBy`: `int`, `ModifiedAt`: `timestamp`}
	_                             = bytes.MinRead
)

func testInputAchievementActionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(inputAchievementActionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(inputAchievementActionAllColumns) == len(inputAchievementActionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &InputAchievementAction{}
	if err = randomize.Struct(seed, o, inputAchievementActionDBTypes, true, inputAchievementActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievementAction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InputAchievementActions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, inputAchievementActionDBTypes, true, inputAchievementActionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InputAchievementAction struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testInputAchievementActionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(inputAchievementActionAllColumns) == len(inputAchievementActionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &InputAchievementAction{}
	if err = randomize.Struct(seed, o, inputAchievementActionDBTypes, true, inputAchievementActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievementAction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InputAchievementActions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, inputAchievementActionDBTypes, true, inputAchievementActionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InputAchievementAction struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(inputAchievementActionAllColumns, inputAchievementActionPrimaryKeyColumns) {
		fields = inputAchievementActionAllColumns
	} else {
		fields = strmangle.SetComplement(
			inputAchievementActionAllColumns,
			inputAchievementActionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := InputAchievementActionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testInputAchievementActionsUpsert(t *testing.T) {
	t.Parallel()

	if len(inputAchievementActionAllColumns) == len(inputAchievementActionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLInputAchievementActionUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := InputAchievementAction{}
	if err = randomize.Struct(seed, &o, inputAchievementActionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize InputAchievementAction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert InputAchievementAction: %s", err)
	}

	count, err := InputAchievementActions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, inputAchievementActionDBTypes, false, inputAchievementActionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InputAchievementAction struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert InputAchievementAction: %s", err)
	}

	count, err = InputAchievementActions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
